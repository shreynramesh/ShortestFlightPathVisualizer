
package com.mycompany.app;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

public interface IAirportGraph extends GraphADT<IAirport> {

    /**
     * Uses GraphADT to load airports from Data Wrangler into the graph. Each
     * airport has an array of IRoutes/edges (routes to other airports that are
     * randomly generated by the Data Wrangler). This array will be used to add
     * edges to this graph.
     * 
     * @param allAirports an array of Airports provided by the Data Wrangler
     */
    public void loadGraph(IAirport source, IAirport destination, ArrayList<IAirport> allAirports, IAirportLoader al);

    /**
     * This method will be called after Dijkstra's Algorithm is called on the
     * AirportGraph. It takes an arrayList of directed vertices, calculates the
     * total distance between them and multiplies it by the speed. Speed =
     * Distance/Time
     * 
     * @param inOrderPath       the directed set of nodes
     * @param averagePlaneSpeed the speed of the plane in km/hr
     * @return a String representation of the time it would take the average
     *         commerical flight to reach its destination
     */
    public String calculateflightTime(List<IAirport> inOrderPath, double averagePlaneSpeed);

    /**
     * This method simply calculates the distance between two Airports.
     * 
     * @param a1 airport 1
     * @param a2 airport 2
     * @return a double representing the distance between the 2 airports in km.
     */
    public int calculateDistanceBetweenAirports(IAirport a1, IAirport a2);

    /**
     * This method returns an arrayList of airport names that share the same given
     * prefix. This is returned to the frontend which uses the array to display
     * these airports in a dropdown to help the user pick an airport.
     * 
     * @param prefix a string that holds prefix
     * @return an arrayList of Strings which each represent an airport
     */
    public ArrayList<String> getAirportsFromTrie(String prefix);

    /**
     * This method puts all the airports into a hashtable for easy access by name
     * 
     * @param allAirports a list of all the airports
     */
    public Hashtable<String, IAirport> loadAirportHashtable(ArrayList<IAirport> allAirports);

    /**
     * This method returns the hashtable initialized by loadAirportHashtable()
     * 
     * @return a Hashtable containing all the airports
     */
    public Hashtable<String, IAirport> getAirportHashtable();
}
